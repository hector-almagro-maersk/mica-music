name: Build and Deploy APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Create local.properties with Spotify credentials
      run: |
        echo "SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }}" >> local.properties
        echo "SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }}" >> local.properties

    - name: Download Spotify App Remote SDK
      run: |
        # Create placeholder for Spotify SDK - in production, download from Spotify
        mkdir -p app/libs
        # This is a placeholder - replace with actual Spotify SDK download
        echo "Placeholder for Spotify App Remote SDK" > app/libs/spotify-app-remote-release-0.8.0.aar

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Validate Gradle Wrapper
      run: ./gradlew --version

    - name: Check Android SDK
      run: |
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        if [ -d "$ANDROID_HOME" ]; then
          echo "Android SDK found at: $ANDROID_HOME"
          ls -la "$ANDROID_HOME"
        else
          echo "Android SDK not found"
        fi

    - name: Build with Gradle
      run: ./gradlew build --stacktrace --info

    - name: Build APK
      run: ./gradlew assembleRelease

    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      if: github.event_name == 'release'
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}

    - name: Upload APK to Release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.sign_app.outputs.signedReleaseFile }}
        asset_name: mica-music-release.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload APK as artifact
      if: github.event_name != 'release'
      uses: actions/upload-artifact@v4
      with:
        name: apk
        path: app/build/outputs/apk/release/*.apk